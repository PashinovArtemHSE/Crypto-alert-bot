"""
–ú–æ–¥—É–ª—å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞.
"""

from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from library.api_utils import fetch_price
import aiohttp
import logging
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from io import BytesIO
from configparser import ConfigParser

config = ConfigParser()
config.read('config.ini')
MAX_PAIRS_PER_USER = int(config['limits']['max_pairs_per_user'])

"""–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
user_settings = {}

"""–≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞"""
AWAITING_PLOT_PAIR, AWAITING_SET_PARAMS, AWAITING_DELETE_PAIR = range(3)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n\n"
        "üß≠ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "/set ‚Äì –∑–∞–¥–∞—Ç—å —É—Å–ª–æ–≤–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "/list ‚Äì —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π\n"
        "/plot ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫\n"
        "/delete ‚Äì —É–¥–∞–ª–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
    )


async def list_conditions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list"""
    user_id = update.effective_user.id
    user_data = user_settings.get(user_id, [])
    if not user_data:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.")
        return

    text = "üìã –í–∞—à–∏ —É—Å–ª–æ–≤–∏—è:\n"
    for entry in user_data:
        text += f"üîπ {entry['symbol']} | {entry['percent']}%\n"
    await update.message.reply_text(text)


async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info"""
    await update.message.reply_text(
        "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ Binance.\n\n"
        "<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "üîπ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
        "üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞\n"
        "üîπ –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å\n"
        "üîπ –£–¥–æ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–æ–º–∞–Ω–¥\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–∏–º–µ—Ä—ã:</b>\n"
        "üìù <b>/set</b> ‚Äì –∑–∞–¥–∞—Ç—å —É—Å–ª–æ–≤–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/set</code> ‚Üí <code>BTCUSDT 5</code>\n\n"
        "üìã <b>/list</b> ‚Äì —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —É—Å–ª–æ–≤–∏–π\n\n"
        "üìà <b>/plot</b> ‚Äì –≥—Ä–∞—Ñ–∏–∫ –ø–∞—Ä—ã:\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/plot</code> ‚Üí <code>ETHUSDT</code>.\n\n"
        "üóë <b>/delete</b> ‚Äì —É–¥–∞–ª–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/delete</code> ‚Üí <code>BTCUSDT</code>.",
        parse_mode='HTML',
    )


async def plot_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /plot"""
    await update.message.reply_text("üìà –í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT")
    return AWAITING_PLOT_PAIR


async def handle_plot_pair(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä—ã –¥–ª—è /plot"""
    symbol = update.message.text.strip().upper()
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(minutes=60)
    url = (
        f'https://api.binance.com/api/v3/klines?symbol={symbol}&interval=1m&'
        f'startTime={int(start_time.timestamp() * 1000)}&endTime={int(end_time.timestamp() * 1000)}'
    )
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                data = await resp.json()

        if not isinstance(data, list) or len(data) == 0:
            await update.message.reply_text("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END

        df = pd.DataFrame(data, columns=[
            "timestamp", "open", "high", "low", "close", "volume",
            "close_time", "quote_asset_volume", "number_of_trades",
            "taker_buy_base_asset_volume", "taker_buy_quote_asset_volume", "ignore"
        ])
        df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
        df["close"] = df["close"].astype(float)

        mean_price = np.mean(df["close"])
        std_price = np.std(df["close"])

        plt.figure(figsize=(10, 4))
        plt.plot(df["timestamp"], df["close"], label=f'{symbol}')
        plt.axhline(mean_price, color='orange', linestyle='--', label='–°—Ä–µ–¥–Ω–µ–µ')
        plt.fill_between(df["timestamp"], mean_price - std_price, mean_price + std_price, color='orange', alpha=0.1,
                         label='¬±1œÉ')
        plt.title(f"{symbol} ‚Äì –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –º–∏–Ω—É—Ç")
        plt.xlabel("–í—Ä–µ–º—è")
        plt.ylabel("–¶–µ–Ω–∞")
        plt.grid(True)
        plt.legend()

        buf = BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close()

        await update.message.reply_photo(photo=buf)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.")
    return ConversationHandler.END


async def set_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set"""
    await update.message.reply_text("‚öô –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ü–ê–†–ê –ü–†–û–¶–ï–ù–¢\n–ü—Ä–∏–º–µ—Ä: BTCUSDT 5")
    return AWAITING_SET_PARAMS


async def handle_set_params(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è /set"""
    user_id = update.effective_user.id
    parts = update.message.text.strip().split()
    if len(parts) != 2:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ü–ê–†–ê –ü–†–û–¶–ï–ù–¢")
        return ConversationHandler.END

    symbol, percent = parts
    try:
        percent = float(percent)
        if percent < 0.01 or percent > 100:
            await update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0.01 –∏ 100")
            return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return ConversationHandler.END

    current_price = await fetch_price(symbol)
    if current_price is None:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É.")
        return ConversationHandler.END

    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä"""
    user_pairs = user_settings.get(user_id, [])
    if len(user_pairs) >= MAX_PAIRS_PER_USER:
        await update.message.reply_text(f"‚ùå –í—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä ({MAX_PAIRS_PER_USER}).")
        return ConversationHandler.END

    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–∞ –ø–∞—Ä–∞"""
    for entry in user_pairs:
        if entry['symbol'] == symbol.upper():
            await update.message.reply_text(f"‚ùå –ü–∞—Ä–∞ {symbol.upper()} —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")
            return ConversationHandler.END

    entry = {
        'symbol': symbol.upper(),
        'percent': percent,
        'start_price': current_price,
        'last_notified_price': current_price,
        'last_checked_price': current_price
    }

    user_settings.setdefault(user_id, []).append(entry)
    await update.message.reply_text(
        f"‚úÖ –ë—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å {symbol.upper()} –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ {percent}%.\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.6f}"
    )
    return ConversationHandler.END


async def delete_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete"""
    await update.message.reply_text("üóë –í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT")
    return AWAITING_DELETE_PAIR


async def handle_delete_pair(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    symbol = update.message.text.strip().upper()

    user_data = user_settings.get(user_id, [])
    new_conditions = [cond for cond in user_data if cond['symbol'] != symbol]

    if len(new_conditions) == len(user_data):
        await update.message.reply_text(f"‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ –±—ã–ª–æ —É—Å–ª–æ–≤–∏–π –¥–ª—è {symbol}.")
        return ConversationHandler.END

    if new_conditions:
        user_settings[user_id] = new_conditions
    else:
        user_settings.pop(user_id, None)

    await update.message.reply_text(f"‚úÖ –í—Å–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è {symbol} —É–¥–∞–ª–µ–Ω—ã.")
    return ConversationHandler.END
